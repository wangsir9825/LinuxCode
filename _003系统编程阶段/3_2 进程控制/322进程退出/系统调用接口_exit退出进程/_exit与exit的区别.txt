#include <stdio.h> // printf、perror
#include <unistd.h> // fork、pid_t、getpid、getppid、sleep、_exit
#include <stdlib.h> // exit
void func1()
{
    printf("---func1---");
    _exit(99);//利用_exit退出进程，退出前不刷新缓存区
}
void func2()
{
    printf("---func2---");
    sleep(2);
    exit(99);//利用exit退出进程，退出前刷新缓冲区
}
int main(int argc,char* argv[], char* env[])
{  
    pid_t pid = fork(); // 创建一个子进程
    if(pid < 0){
        perror("fork error");
        return -1;
    }
    if(pid == 0) // 子进程
    {
        printf("I am child, my PID is : %d\n", getpid());
        func1(); // 退出子进程
        printf("hello world!\n");
    }
    else // 父进程
    {
        printf("I am father, my PID is : %d\n", getpid());
        sleep(1);
        func2(); // 退出父进程
        printf("hello world!\n");
    }
    return 0;
}